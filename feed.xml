<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhiguo</title>
    <description></description>
    <link>https://ZhiguoLong.github.io/</link>
    <atom:link href="https://ZhiguoLong.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 09 Apr 2024 22:06:10 +0800</pubDate>
    <lastBuildDate>Tue, 09 Apr 2024 22:06:10 +0800</lastBuildDate>
    <generator>Jekyll v3.9.5</generator>
    
      <item>
        <title>A bug in the algorithm for triangulating a graph by (Tarjan 1984)</title>
        <description>&lt;p&gt;About one year ago, my student Qiyuan Hu noticed a strange thing when trying to triangulate the graph of a Qualitative Constraint Network (QCN). In particular, when we apply the triangulation algorithm to a complete graph, it will complain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list index out of range&lt;/code&gt;. A simple example can be found in &lt;a href=&quot;https://ZhiguoLong.github.io/file/test_triangulation.ipynb&quot;&gt;test_triangulation.ipynb&lt;/a&gt;. (Please ignore constraints there which are specific for QCN.) The algorithm used is from (Tarjan 1984)&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which consists of two sub-algorithms: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maximum Cardinality Search&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MCS&lt;/code&gt;) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fill-in Computation&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIC&lt;/code&gt;). We checked the details in that paper, and found that the algorithm was implemented correctly and the error is a bug of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MCS&lt;/code&gt;. &lt;strong&gt;This bug applies to general simple graphs&lt;/strong&gt;, and is not restricted to the field of Qualitative Spatial Reasoning. I did some simple search and found several implementations of the algorithm, e.g., &lt;a href=&quot;https://github.com/igraph/igraph/blob/1959e9e8b056a8cb1f7828939d3371b40ae83b08/src/misc/chordality.c&quot;&gt;igraph&lt;/a&gt;. However, to the best of my knowledge, I didn’t see any previous discussion on this bug (of course I could be wrong).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/mcs-algorithm.png&quot; alt=&quot;Pseudo code of Maximum Cardinality Search algorithm&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MCS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    
   &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;a_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;     

   &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; 

   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;     
      &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# # uncomment codes below to fix the bug    
&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# if j==(len(ConMatrix)-1):    
&lt;/span&gt;      
      &lt;span class=&quot;c1&quot;&gt;#    break    
&lt;/span&gt;      
      &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we started to explore the cause of this error. From the error message, we can see that the error is due to trying to access an element in the list by a given index, but the given index is larger than the length of the index minus one (out of range).
The relevant list in our implementation is used to store &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[k]&lt;/code&gt;, which consists of all unnumbered vertices adjacent to exactly $k$ numbered vertices. The range of $k$ is from $0$ to $n-1$.&lt;/p&gt;

&lt;p&gt;A simple example will be able to illustrate how the error occurs and how we should fix it. Let us consider a complete graph of 3 vertices $v_0,v_1,v_2$. The algorithm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MCS&lt;/code&gt; will number the vertices from $0$ to $2$. Initially, all 3 vertices are unnumbered and each of them is adjacent to $0$ numbered vertices, i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[0]={0, 1, 2}&lt;/code&gt;. A vertex from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[0]&lt;/code&gt; will be selected and numbered, say $v_0$ is selected and numbered as $0$, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[0]={1, 2}&lt;/code&gt;. The neighbors of $v_0$ will be moved from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[0]&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[1]&lt;/code&gt; and now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[0]={ }&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[1]={1,2}&lt;/code&gt;. Then the index $j$ of the set to consider is increased by 1. If the corresponding set is empty, then it means no unnumbered vertex is adjacent to $j$ numbered vertices, so $j$ is decreased until a value s.t. there exists an unnumbered vertex that is adjacent to $j$ numbered vertices. In the case here, $j$ is increased from $0$ to $1$, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[1]&lt;/code&gt; is non-empty, so the next loop will have $j$ being $1$.&lt;/p&gt;

&lt;p&gt;In the next loop, a vertex in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[1]&lt;/code&gt; is selected and numbered, say $v_1$. Before increasing $j$ by 1, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[0]={ }&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[1]={ }&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[2]={2}&lt;/code&gt;. Then $j$ becomes $2$ and the next loop will have $j$ being $2$. The vertex $v_2$ in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[2]&lt;/code&gt; is selected and every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[k]&lt;/code&gt; ($k=0,1,2$) becomes empty. Then $j$ is increased by $1$ and becomes $3$, but there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set[3]&lt;/code&gt;, so an error of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list index out of range&lt;/code&gt; will be raised.&lt;/p&gt;

&lt;p&gt;It can be seen from the above example that, when $j=n-1$, we are about to number vertices adjacent to $n-1$ numbered vertices. Note that there can only be one such vertex that is adjacent to $n-1$ numbered vertices, that is, the last unnumbered vertex. So when $j=n-1$, there is no need to do anything but to number the last unnumbered vertex.&lt;/p&gt;

&lt;p&gt;Therefore, &lt;strong&gt;a simple fix&lt;/strong&gt; is to add a check right after numbering a vertex, to see if $j$ is $n-1$, and if so then we just stop the numbering process. A fixed implementation can be found in &lt;a href=&quot;https://github.com/ZhiguoLong/DPCI_code/blob/9a3ec13b9a08bdc00148a4bbb58e88358d53d8eb/src/triangulation.py&quot;&gt;triangulation.py&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Robert E. Tarjan, Mihalis Yannakakis. Simple Linear-Time Algorithms to Test Chordality of Graphs, Test Acyclicity of Hypergraphs, and Selectively Reduce Acyclic Hypergraphs, SIAM Journal on Computing, 1984, 13(3): 566–579. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 18 Aug 2022 11:00:00 +0800</pubDate>
        <link>https://ZhiguoLong.github.io/2022/08/18/triangulating-a-graph/</link>
        <guid isPermaLink="true">https://ZhiguoLong.github.io/2022/08/18/triangulating-a-graph/</guid>
        
        <category>chordal graph</category>
        
        <category>triangulation</category>
        
        <category>Tarjan</category>
        
        
      </item>
    
      <item>
        <title>Java Jar Building</title>
        <description>&lt;p&gt;Extracting to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt; file makes it convenient to run a Java program from command
line. But today I encountered a problem of extracting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt; file with IntelliJ Idea.&lt;/p&gt;

&lt;p&gt;The problem is that after using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build Artifact&lt;/code&gt; function in IntelliJ Idea to
build a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt; file, I cannot run it from command line: it says “Error: Could not
find or load main class”.&lt;/p&gt;

&lt;p&gt;I searched the Internet and finally found two solutions.&lt;/p&gt;

&lt;h2 id=&quot;solution-1-manually-delete-some-files-from-the-jar-file&quot;&gt;Solution 1: Manually delete some files from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;Delete from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt; file these files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/*.RSA&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/*.SF&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/*.DSA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is easy. You can open some archive manager software and delete these files and
save. Then the program will run like a magic.&lt;/p&gt;

&lt;p&gt;This solution is from &lt;a href=&quot;https://stackoverflow.com/questions/51455197/gradle-fatjar-could-not-find-or-load-main-class/51456080&quot;&gt;Andreas Volkmann&lt;/a&gt;.
In the solution, he mentioned that this is related to “signatures of interfering dependencies”,
which inspired me to have a look at how to avoid these kind of signature of dependencies
and leaded to the second solution.&lt;/p&gt;

&lt;h2 id=&quot;solution-2-change-extracting-library-jars-to-pack-as-it-is&quot;&gt;Solution 2: Change extracting library jars to pack as it is&lt;/h2&gt;

&lt;p&gt;In the configuration of Artifact (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Structure -&amp;gt; Artifact&lt;/code&gt;), there is a
window for choosing source. What we need to do is to remove all the “Extracted”
things, and double click the library files in “Available Elements” on the right.
This is from &lt;a href=&quot;https://stackoverflow.com/questions/41746177/how-do-i-create-a-runnable-jar-in-intellij-as-i-would-in-eclipse/43855741#43855741&quot;&gt;Someone on stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The problem of “could not find or load main class” here is due to that some dependencies
are signed which mess up the META-INF folder.&lt;/li&gt;
  &lt;li&gt;There are more advanced ways to excluding signature files.&lt;/li&gt;
  &lt;li&gt;It is a good habit to keep library jars as it is when packaging a new jar.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 19 Oct 2018 23:15:00 +0800</pubDate>
        <link>https://ZhiguoLong.github.io/2018/10/19/java-intellij-jar/</link>
        <guid isPermaLink="true">https://ZhiguoLong.github.io/2018/10/19/java-intellij-jar/</guid>
        
        <category>Java</category>
        
        <category>Jar</category>
        
        <category>IntelliJ</category>
        
        
      </item>
    
      <item>
        <title>R ggplot2 confusions</title>
        <description>&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; is powerful and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ggplot2&lt;/code&gt; makes it more accessible.
Recently, I need to create a plot that has the Greek letter \(\mu\) displayed as a label.
First I tried the following script in terminal&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r &amp;lt;- rnorm(mean = 5, sd = 1, n = 1000)
df &amp;lt;- data.frame(r)
h &amp;lt;- ggplot(df,aes(r))
h &amp;lt;- h + geom_histogram()
lstr1 &amp;lt;- expression(mu == 5)
h &amp;lt;- h + annotate(geom=&quot;text&quot;,label=as.character(lstr1),x=8,y=100,family=&quot;Times&quot;,size=6,parse=TRUE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And \(\mu\) is displayed correctly in the default device as shown below.
&lt;img src=&quot;/img/in-post/R-ggplot2-mu-png.png&quot; alt=&quot;ggplot2 correct mu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, when I tried to save the figure by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdf(&quot;histogram.pdf&quot;)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ggsave(&quot;histogram.pdf&quot;)&lt;/code&gt;
the letter \(\mu\) was displayed as \(\propto\) in the pdf file, as shown below.
&lt;img src=&quot;/img/in-post/R-ggplot2-mu-pdf.png&quot; alt=&quot;ggplot2 wrong mu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be fixed by saving the figure to pdf with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cairo_pdf(&quot;histogram.pdf&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I suspect it was because of encoding or font issue in the saving process.&lt;/p&gt;

&lt;p&gt;By the way, if one wants \(\mu\) to be displayed as italic, then changing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lstr1 &amp;lt;- expression(mu == 5)&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lstr1 &amp;lt;- expression(italic(&quot;\u03BC&quot;) == 5)&lt;/code&gt;
will do.
Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\u03BC&lt;/code&gt; is the unicode of \(\mu\). (cf. &lt;a href=&quot;https://stackoverflow.com/questions/27690729/greek-letters-symbols-and-line-breaks-inside-a-ggplot-legend-label/27741196&quot;&gt;Greek letters, symbols, and line breaks inside a ggplot legend label&lt;/a&gt;)&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Aug 2018 21:00:00 +0800</pubDate>
        <link>https://ZhiguoLong.github.io/2018/08/28/r-ggplot2-mu/</link>
        <guid isPermaLink="true">https://ZhiguoLong.github.io/2018/08/28/r-ggplot2-mu/</guid>
        
        <category>R</category>
        
        <category>ggplot2</category>
        
        <category>save to pdf</category>
        
        
      </item>
    
  </channel>
</rss>
